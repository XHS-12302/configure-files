#=======================================
# EXAMPLE
#=======================================
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#access_log logs/brian.log main gzip buffer=128k flush=5s; 
#pid        logs/nginx.pid;

# nginx compile
# ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx/ --with-http_gzip_static_module --with-http_ssl_module --with-http_v2_module 

# TODO 1,nginx configure robot.txt and favicon.ico
# TODO 2,rewrite operation
# TODO 3,hard link edit line
#
# 1.
# 在nginx中配置proxy_pass时，如果是按照^~匹配路径时,要注意proxy_pass后的url最后的/
# 当加上了/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走;
# 如果没有/，则会把匹配的路径部分也给代理走.		
# 
# 2.
# 代理重定向，如果关闭的话，重定向请求会直接映射到 http://tomcat/redirect/path
# 开启后，重定向会通过nginx代理，项目内的重定向正常访问
# proxy_redirect off;
#
# 3.
# location /i/ {
#	root /data/w3;
# }
# The /data/w3/i/top.gif file will be sent in response to the “/i/top.gif” request.
#
# location /i/ {
#	alias /data/w3/images/;
# }
# on request of “/i/top.gif”, the file /data/w3/images/top.gif will be sent.
# 
# 4.
# HTTP Strict Transport Security(HSTS) and NGINX (https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/)
# 307 from temporary redirect to Internal Redirect configuration
#=======================================

#user  nobody;
worker_processes  1;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    # keepalive_timeout  0;
    keepalive_timeout  65;
	# 开启gzip
	gzip  on;
	# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
	gzip_min_length 1k;
	# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间。一般设置1和2
	gzip_comp_level 2;
	# 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	# 是否在http header中添加Vary: Accept-Encoding，建议开启
	gzip_vary on;
	# 禁用IE 6 gzip
	gzip_disable "MSIE [1-6]\.";
	# 设置缓存路径并且使用一块最大100M的共享内存，用于硬盘上的文件索引，包括文件名和请求次数，每个文件在1天内若不活跃（无请求）则从硬盘上淘汰，硬盘缓存最大10G，满了则根据LRU算法自动清除缓存。
	proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;
	# 用于tomcat hot deploy (upload war)
	client_max_body_size 200M;
	# haha 
	# proxy_intercept_errors on;
	# fastcgi_intercept_errors on;
	# error_page 404 =200 /404.html;
	#=======================================
	# 隐藏返回头信息中nginx的版本号
	server_tokens off;
	# 隐藏server信息
	# 需要重新编译nginx 
	# 进入解压出来的nginx源码目录
	# vim src/http/ngx_http_header_filter_module.c # 49-50
	# 修改以下两个值,后重新编译 example:Server: X-Web
	# static char ngx_http_server_string[] = "Server:nginx";
	# static cahr ngx_http_server_full_string[] = "Server:" NGINX_VER ;

	upstream tomcat{
		server 127.0.0.1:13380;
	}

	upstream activemq{
		server 127.0.0.1:8161;
	}


	#=======================================
    server {
        listen       80;
        server_name  wtfo.cn;
		
		return 307 https://wtfo.cn/;
		rewrite ^/(.*) https://wtfo.cn redirect;
		# include ../html/include_robots;
		# include ../html/include_ico;
		# 
        # location / {
        #     root   html;
        #     index  index.html index.htm;
        # }

		# error_page 404 =200 /404.html;
        # error_page   500 502 503 504  /50x.html;
        # location = /50x.html {
        #     root   html;
        # }
    }

	#=======================================
    server {
        listen       80;
        server_name  test.wtfo.cn;

		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://tomcat;
			proxy_redirect off;
			index index.html index.htm;
			proxy_intercept_errors on;
		}

		include ../html/include_robots;
		include ../html/include_ico;

		error_page 404 =200  @notfound;
		location @notfound {
			default_type text/html;
        	# add_header Content-Type "text/plain; charset=UTF-8";
			return 200 "<html><head><title>4004 Not Found</title></head><body><center><h1>4004 Not Found</h1></center><hr><center>nginx</center></body></html>";
		}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

	#=======================================
    server {
        listen       80;
        server_name  mvn.wtfo.cn;

        location / {
            root   html;
            index  index.html index.htm;
        }

		location ^~ /nexus/ {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_pass http://127.0.0.1:10008;
		}

		include ../html/include_robots;
		include ../html/include_ico;

		error_page 404 =200 /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

	#=======================================
	server {
        listen       80;
        server_name  service.wtfo.cn;

		location = /speed {
			proxy_pass http://127.0.0.1:13330/speed/gui.html;
			proxy_redirect off;
		}

		location / {
			proxy_pass http://127.0.0.1:13330;
			proxy_http_version 1.1;
            proxy_read_timeout 360s;   
            proxy_redirect off;   
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header REMOTE-HOST $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		}

		include ../html/include_robots;
		include ../html/include_ico;

		error_page 404 =200  @notfound;
		location @notfound {
			default_type text/html;
        	# add_header Content-Type "text/plain; charset=UTF-8";
			return 200 "<html><head><title>4004 Not Found</title></head><body><center><h1>4004 Not Found</h1></center><hr><center>nginx</center></body></html>";
		}

		proxy_intercept_errors on;
		error_page 404 =200 /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
	}


    # HTTPS server
	
	#=======================================
	server {
	    listen 443 ssl;
		server_name www.wtfo.cn; 
		ssl_certificate 1_www.wtfo.cn_bundle.crt; 
		ssl_certificate_key 2_www.wtfo.cn.key; 
		ssl_session_timeout 5m;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; 
		ssl_prefer_server_ciphers on;
		# HSTS
		add_header Strict-Transport-Security "max-age=172800; includeSubDomains" always;
		
		location / {
			# HSTS
			add_header Strict-Transport-Security "max-age=172800; includeSubDomains" always;
			root html;
			index index.html index.htm;
		}
		
		location = /ssr {
			proxy_pass http://tomcat/ssr/subscribe/font;
			proxy_redirect off;
		}
	
		location ^~ /ssr/ {
			# (http://tomcat/)(404)   	https://www.wtfo.cn/ssr/statics/css/bootstrap.min.css
			# (http://tomcat)() 		https://www.wtfo.cn/ssr/statics/css/bootstrap.min.css 
			proxy_pass http://tomcat;
			proxy_redirect off;
		}

		location ^~ /frp/  {
			proxy_pass http://127.0.0.1:13310/static/;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		}

		location ^~ /activemq/ {
			proxy_pass http://activemq;
			# proxy_redirect off;
		}


		location ^~ /explorer/ { 
			proxy_pass http://tomcat; 
		}

		include ../html/include_robots;
		include ../html/include_ico;

		error_page 404 =200 /404.html;
		# 开启缓存，关闭静态资源日志记录，节省服务器资源
		# location ~* ^.+\.(css|js|ico|gif|jpg|jpeg|png)$ {
			# log_not_found off;
			# 关闭日志
			# access_log off;
			# 缓存时间7天
			# expires 7d;
			# 源服务器
			# proxy_pass http://tomcat;
			# 指定上面设置的缓存区域
			# proxy_cache imgcache;
			# 缓存过期管理
			# proxy_cache_valid 200 302 1d;
			# proxy_cache_valid 404 10m;
			# proxy_cache_valid any 1h;
			# proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
		# }
	}
}
