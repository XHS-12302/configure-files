
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

# nginx compile
# ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx/ --with-http_gzip_static_module --with-http_ssl_module --with-http_v2_module 


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

	# 开启gzip
	gzip  on;
	# 启用gzip压缩的最小文件，小于设置值的文件将不会压缩
	gzip_min_length 1k;
	# gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间。一般设置1和2
	gzip_comp_level 2;
	# 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。
	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
	# 是否在http header中添加Vary: Accept-Encoding，建议开启
	gzip_vary on;
	# 禁用IE 6 gzip
	gzip_disable "MSIE [1-6]\.";
	# 设置缓存路径并且使用一块最大100M的共享内存，用于硬盘上的文件索引，包括文件名和请求次数，每个文件在1天内若不活跃（无请求）则从硬盘上淘汰，硬盘缓存最大10G，满了则根据LRU算法自动清除缓存。
	proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;

	#=======================================
	# 隐藏返回头信息中nginx的版本号
	server_tokens off;
	# 隐藏server信息
	# 需要重新编译nginx 
	# 进入解压出来的nginx源码目录
	# vim src/http/ngx_http_header_filter_module.c # 49-50
	# 修改以下两个值,后重新编译 example:Server: X-Web
	# static char ngx_http_server_string[] = "Server:nginx";
	# static cahr ngx_http_server_full_string[] = "Server:" NGINX_VER ;
    
	# 用于tomcat hot deploy (upload war)
	client_max_body_size 200M;

	upstream tomcat{
		server 127.0.0.1:13380;
	}


    server {
        listen       80;
        server_name  wtfo.site;

        location / {
            root   html;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    server {
        listen       80;
        server_name  test.wtfo.site;

		location / {
			# 这个大小的设置非常重要，如果 git 版本库里面有大文件，设置的太小，文件push 会
			# 失败，根据情况调整
			# client_max_body_size 200m;
			proxy_redirect off;
			# 以下确保 gitlab中项目的 url 是域名而不是 http://git，不可缺少
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			# 反向代理到 gitlab 内置的 nginx
			proxy_pass http://tomcat;
			index index.html index.htm;
		}
        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
	
	server {
		listen 443 ssl; 
		server_name www.wtfo.site; 
		ssl_certificate 1_www.wtfo.site_bundle.crt; 
		ssl_certificate_key 2_www.wtfo.site.key; 
		ssl_session_timeout 5m;
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 
		ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; 
		ssl_prefer_server_ciphers on;

		location / {
			root html;
			index index.html index.htm;
		}

		location ^~ /ssr/ {
			proxy_pass http://127.0.0.1:13380;
			proxy_redirect off;
		}

		# 开启缓存，关闭静态资源日志记录，节省服务器资源
		location ~* ^.+\.(css|js|ico|gif|jpg|jpeg|png)$ {
			log_not_found off;
			# 关闭日志
			access_log off;
			# 缓存时间7天
			expires 7d;
			# 源服务器
			proxy_pass http://localhost:8888;
			# 指定上面设置的缓存区域
			proxy_cache imgcache;
			# 缓存过期管理
			proxy_cache_valid 200 302 1d;
			proxy_cache_valid 404 10m;
			proxy_cache_valid any 1h;
			proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
		}
	}


}
